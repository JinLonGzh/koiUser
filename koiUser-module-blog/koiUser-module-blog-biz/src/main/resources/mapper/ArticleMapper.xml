<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koi.blog.mapper.mysql.ArticleMapper">

    <resultMap id="BaseResultMap" type="com.koi.blog.domain.entity.Article">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="articleTitle" column="article_title" jdbcType="VARCHAR"/>
            <result property="categoryId" column="category_id" jdbcType="BIGINT"/>
            <result property="articleCover" column="article_cover" jdbcType="VARCHAR"/>
            <result property="articleContent" column="article_content" jdbcType="VARCHAR"/>
            <result property="articleTop" column="article_top" jdbcType="TINYINT"/>
            <result property="status" column="status" jdbcType="TINYINT"/>
            <result property="viewCount" column="view_count" jdbcType="INTEGER"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
            <result property="deleted" column="deleted" jdbcType="BIT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,article_title,category_id,
        article_cover,article_content,is_top,
        status,create_time,update_time,
        deleted
    </sql>

    <select id="pageArticle" resultType="com.koi.blog.domain.vo.response.ArticleRespVO">
        SELECT
            a.id,
            a.article_cover,
            a.article_title,
            SUBSTR(a.article_content, 1, 500) AS article_content,
            a.article_top,
            c.id as category_id,
            c.category_name,
            a.view_count,
            a.create_time,
            a.update_time
        FROM
            blog_article a
                LEFT JOIN
            blog_category c ON c.id = a.category_id
        <where>
            <if test="req.categoryId != null">
                a.category_id = #{req.categoryId}
            </if>
            AND a.deleted = 0
            AND a.`status` = 0
        </where>
        ORDER BY a.article_top Desc, a.id DESC
            LIMIT #{current}, #{pageSize}
    </select>
    <select id="getArticleNum" resultType="java.lang.Long">
        SELECT
        count(1)
        FROM
        blog_article a
        <where>
            <if test="req.categoryId != null">
                a.category_id = #{req.categoryId}
            </if>
            AND a.deleted = 0
            AND a.`status` = 0
        </where>
    </select>

    <select id="getArticleDetailByIdList" resultType="com.koi.blog.domain.vo.response.ArticleRespVO">
        SELECT a.id,
        a.article_cover,
        a.article_title,
        SUBSTR(a.article_content, 1, 500) AS article_content,
        a.article_top,
        c.id as category_id,
        c.category_name,
        a.view_count,
        a.create_time,
        a.update_time
        FROM (SELECT * FROM blog_article WHERE id IN
        <foreach item="item" collection="idList" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND `status` = 0 AND deleted = 0) a
        LEFT JOIN blog_category c ON c.id = a.category_id
    </select>

    <select id="pageArticleAdmin" resultType="com.koi.blog.domain.vo.response.ArticleAdminRespVO">
        SELECT
        a.id,
        a.article_title,
        c.id as category_id,
        c.category_name,
        a.article_cover,
        a.article_content,
        a.article_top,
        a.status,
        a.view_count,
        a.create_time,
        a.update_time
        FROM
        blog_article a
        LEFT JOIN
        blog_category c ON c.id = a.category_id
        <where>
            <if test="req.keywords != null">
                and a.article_title like concat('%',#{req.keywords},'%')
            </if>
            <if test="req.status != null">
                and a.status = #{req.status}
            </if>
            <if test="req.categoryId != null">
                and a.category_id = #{req.categoryId}
            </if>
            AND a.deleted = 0
        </where>
        ORDER BY a.article_top Desc, a.id DESC
        LIMIT #{current}, #{pageSize}
    </select>

    <select id="countArticleAdmin" resultType="java.lang.Long">
        SELECT
        count(1)
        FROM
        blog_article a
        <where>
            <if test="req.keywords != null">
                and a.article_title like concat('%',#{req.keywords},'%')
            </if>
            <if test="req.status != null">
                and a.status = #{req.status}
            </if>
            <if test="req.categoryId != null">
                and a.category_id = #{req.categoryId}
            </if>
            AND a.deleted = 0
        </where>
    </select>
</mapper>
